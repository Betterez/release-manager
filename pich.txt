selectedSourceGroups, selectedTargetGroups := selector.SelectedSourceGroups, selector.SelectedTargetGroups
fmt.Println("targets")
for _, tg := range selectedTargetGroups {
  fmt.Println(*tg.TargetGroupName)
}
fmt.Println("sources")
for _, tg := range selectedSourceGroups {
  fmt.Println(*tg.TargetGroupName)
}
if len(selectedSourceGroups) == 0 || len(selectedTargetGroups) == 0 {
  fmt.Println("target or source groups have no members, can't switch")
  os.Exit(1)
}
if err != nil {
  fmt.Println("can't get source/target groups", err)
  os.Exit(1)
}
if len(selectedSourceGroups) != 1 {
  fmt.Printf("There are %d source group. can only use one.\r\n", len(selectedSourceGroups))
  for index, stg := range selectedSourceGroups {
    fmt.Println(index, *stg.TargetGroupArn)
  }
  os.Exit(1)
}
if nil != err {
  fmt.Println("error getting the source instances")
}

targetRegisterRequest := []*elbv2.TargetDescription{}
fmt.Println("source groups:")
for _, currentTargetGroup := range selectedSourceGroups {
  targetDescription, _ := elbService.DescribeTargetHealth(&elbv2.DescribeTargetHealthInput{
    TargetGroupArn: currentTargetGroup.TargetGroupArn,
  })
  for ord, desc := range targetDescription.TargetHealthDescriptions {
    targetRegisterRequest = append(targetRegisterRequest, desc.Target)
    fmt.Printf("%d. %s - %s\r\n", ord, *desc.Target.Id, *desc.TargetHealth.State)
  }
}
for _, currentTargetGroup := range selectedTargetGroups {
  elbService.RegisterTargets(&elbv2.RegisterTargetsInput{
    TargetGroupArn: currentTargetGroup.TargetGroupArn,
    Targets:        targetRegisterRequest,
  })
}

for _, currentTargetGroup := range selectedTargetGroups {
  approuvedTargetGroupsNumber := 0
  sleepers := 0
  targetDescription, _ := elbService.DescribeTargetHealth(&elbv2.DescribeTargetHealthInput{
    TargetGroupArn: currentTargetGroup.TargetGroupArn,
  })
  healthCount := 0
  for _, currentState := range targetDescription.TargetHealthDescriptions {
    if *currentState.TargetHealth.State == "healthy" {
      healthCount++
    }
  }
  if healthCount != len(targetDescription.TargetHealthDescriptions) && sleepers < 10 {
    log.Println("still waiting for the healthcheck")
    time.Sleep(time.Second * 5)
    sleepers++
  } else if sleepers >= 10 {
    log.Println("Waiting too long for healthcheck to be finished")
    os.Exit(1)
  } else if healthCount == len(targetDescription.TargetHealthDescriptions) {
    approuvedTargetGroupsNumber++
  }
  if approuvedTargetGroupsNumber == len(selectedSourceGroups) {
    log.Println("Done inserting.")
    break
  }
}
fmt.Println("Removing unused instances...")
err = removeOldInstancesFrom(selectedSourceGroups[0], selectedTargetGroups)
if nil != err {
  fmt.Println("remove done with an error", err)
}
